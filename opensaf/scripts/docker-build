#!/bin/bash
#
# Create opensaf-cluster image which contains opensaf bin/lib and
# support scripts to start opensafd, scale-out and scale-in nodes
#
# There're 2 ways of buidling opensaf:
# - On the host: Make install and then add the rootfs to the image
#   + 'make -j2; make -j2 install DESTDIR=$(pwd)/rootfs'
#   + Dockerfile: 'ADD rootfs /'
# - On the container: Compile and make install directly on the container
#    + Make volume of opensaf-repo: '-v /home/vudao/workspace/opensaf-code/:/home/opensaf'
#    + Compile code and 'make install'
#
# This script supports the first way
# TODO: The second one
#
# Notes: For the first way, this script compile and install opensaf source code on the host,
#        the python version of the host and container image must be aligned so that pyOsaf
#        works well eg. /usr/local/lib/python2.7/dist-packages/pyosaf

# WORKSPACE is ~/docker/opensaf
WORKSPACE=$(pwd)
DESTDIR="$WORKSPACE/rootfs"
REPO=$WORKSPACE/opensaf-code
IMAGENAME="opensaf-cluster"
flag="FALSE"
count=1

function set_up_workspace
{
    step "Setup workspace"
    rm -rf $DESTDIR
    rm -f $WORKSPACE/Dockerfile
    mkdir -p $DESTDIR
}

function step
{
    echo "Step ${count}: $@"
    count=$((count+1))
}

function clone_opensaf_repo
{
    if [ ! -d $REPO ]; then
        step "Clone opensaf repo"
        git clone -b develop git://git.code.sf.net/p/opensaf/code opensaf-code
    fi
}

function create_dockerfile {
    step "Create Dockerfile"
    cat > $WORKSPACE/Dockerfile <<EOF
FROM opensaf/ubuntu:latest

MAINTAINER Vu Dao <vu.m.dao@gmail.com>

# Add opensaf binaries
ADD  rootfs /

# Add support script to start-up opensaf and scale-out scripts
ADD  to-add/setup-opensaf-node /usr/local/bin/setup-opensaf-node
ADD  to-add/opensaf_scale_out /usr/local/lib/opensaf/opensaf_scale_out
ADD  to-add/scale-in-opensaf.py /usr/local/lib/opensaf/scale-in-opensaf.py
ADD  to-add/scale-out-opensaf.py /usr/local/lib/opensaf/scale-out-opensaf.py
ADD  to-add/osafclm_stop /usr/local/lib/opensaf/clm-scripts/osafclm_stop

RUN  chmod +x /usr/local/bin/setup-opensaf-node && \
     chmod +x /usr/local/lib/opensaf/opensaf_scale_out && \
     chmod +x /usr/local/lib/opensaf/scale-out-opensaf.py && \
     chmod +x /usr/local/lib/opensaf/scale-in-opensaf.py && \
     chmod +x /usr/local/lib/opensaf/clm-scripts/osafclm_stop && \
     groupadd opensaf && \
     useradd -r -g opensaf -d /var/run/opensaf -s /sbin/nologin -c "OpenSAF" opensaf && \
     echo '%{opensaf_user} ALL = NOPASSWD: /sbin/reboot, /sbin/tipc-config, /usr/bin/pkill, /usr/bin/killall' >> /etc/sudoers && \
     echo 'Defaults:%opensaf !requiretty' >> /etc/sudoers && \
     echo 'Defaults:opensaf !requiretty' >> /etc/sudoers && \
     chown opensaf:opensaf /var/lib/opensaf && \
     chown opensaf:opensaf /var/run/opensaf && \
     chown -R opensaf:opensaf /var/log/opensaf && \
     chown -R opensaf:opensaf /etc/opensaf && \
     chown -R opensaf:opensaf /usr/local/bin/setup-opensaf-node && \
     chown -R opensaf:opensaf /usr/local/lib/opensaf/opensaf_scale_out && \
     sed '/\. \/lib\/lsb\/init-functions/ a\\/usr\/local\/bin\/setup-opensaf-node' -i /etc/init.d/opensafd && \
     sed -i 's/#export OPENSAF_CLUSTERAUTO_SCALE_ENABLED=0/export OPENSAF_CLUSTERAUTO_SCALE_ENABLED=1/' /etc/opensaf/nid.conf && \
     ln -s /lib/systemd/system/opensafd.service /etc/systemd/system/multi-user.target.wants/opensafd.service && \
     echo "root:rootroot" | chpasswd

ENV container docker

CMD ["/sbin/init"]
EOF
}

function build_opensaf
{
    step "Build opensaf"
    cd $REPO 
    git clean -fxd
    ./bootstrap.sh
    ./configure CFLAGS="-DRUNASROOT -g -O2" --enable-imm-pbe --enable-python --disable-ais-evt \
    --disable-ais-lck --disable-ais-msg --enable-tests --disable-tipc
    make -j2
    make -j2 install DESTDIR=$DESTDIR
}

function usage {
USAGE="Create opensaf-cluster image\n
\t [-m | --make Build opensaf on the host\n
\t [-r | --repo opensaf repo\n
\t [-h | --help Print usage
    "
    echo -e "$USAGE"
}

function getoption {
    TEMP=`getopt -o r:mh --long repo:,notmake,help \
        -- "$@"`

    eval set -- $TEMP
    while true; do
        case "$1" in
            -m | --make) flag=TRUE; shift 1;;
            -r | --repo) REPO=$2; shift 2;;
            -h | --help) usage; exit 0;;
            --) shift; break;;
            *) echo "Internal error"; exit 1;;
        esac
    done
}

main() {
        getoption $@
        set_up_workspace
        if [ "$flag" == "TRUE" ]; then
            clone_opensaf_repo
            build_opensaf
        else
            cd $REPO; make -j2 install DESTDIR=$DESTDIR
        fi
        create_dockerfile
        step "Build image $IMAGENAME"
        cd $WORKSPACE; docker build --rm -t $IMAGENAME --network host -f $WORKSPACE/Dockerfile .
}

main $@
